# rain_interactive.py -- Rain animation modified for user interaction, with a welcome screen. 
#
# Caitrin Eaton
# Intermediate Python
# Fall 2020
#
# USAGE NOTES:
# To run in the terminal: python rain_interactive.py
# This program animates falling rain. The animation is reactive in the following ways:
#	- press the arrow keys {"Up", "Down", "Left", "Right"} to alter the velocity of the rain
#	- press 'q' to quit

import time
import graphics as gr
import random

def set_direction( key, dx, dy ):
	''' Change the direction of the rain in response to arrow key presses.

	PARAMETERS
	key -- a key press code, usually generated by GraphWin.checkKey()
	dx -- int, the current change in each raindrop's x coordinate, per frame
	dy -- int, the current change in each raindrop's y coordiante, per frame

	RETURNS
	dx -- int, the new change in each raindrop's x coordinate, per frame
	dy -- int, the new change in each raindrop's y coordinate, per frame
	'''

	velocity = 1
	if key == "Up":
		print("Raining up")
		dy -= velocity
	elif key == "Down":
		print("Raining down")
		dy += velocity
	elif key == "Right":
		print("Raining right")
		dx += velocity
	elif key == "Left":
		print("Raining left")
		dx -= velocity
	else:
		print(f"Unrecognized key press: {key}")

	return dx, dy


def check_bounds( win, circ ):
	''' Checks to see if the Circle object has left the window. If so, the shape respawns on the opposite side. 
	
	PARAMETERS
	win -- GraphWin object in which the Circle is drawn
	circ -- a Circle object
	
	RETURNS
	None
	'''
	
	# Find the edges of the window
	left = 0
	right = win.getWidth() - 1
	top = 0
	bottom = win.getHeight() - 1

	# Find the Circle object
	center = circ.getCenter()
	y = center.getY()
	x = center.getX()

	# Check vertical bounds
	dy = 0
	if y < top:	
		dy = bottom - y		# Off the top of the window. Respawn at the bottom.
	elif bottom < y:
		dy = top - y		# Off the bottom of the window. Respawn at the top.

	# Check horizontal bounds
	dx = 0
	if x < left:
		dx = right - x		# Off the left side of the window. Respawn on the right.
	elif right < x:
		dx = left - x		# Off the right side of the window. Respawn on the left.

	circ.move( dx, dy )


def welcome_screen( win ):
	''' Display a welcome screen with instructions.
	
	PARAMETERS
	win -- the GraphWin object in which the instructions will be displayed

	RETURNS
	None 
	'''

	# Instructions for the user
	instructions = "Click to start"
	instructions += "\n\nUse arrow keys to control the direction of the rain"
	instructions += "\n\nPress 'q' to quit"

	# Display the instructions in a box with a solid background
	x_center = win.getWidth()/2
	y_center = win.getHeight()/2 - win.getHeight()*0.10
	x_top_left = x_center - win.getWidth()/3
	y_top_left = y_center - win.getHeight()/8
	x_bottom_right = x_center + win.getWidth()/3
	y_bottom_right = y_center + win.getHeight()/8
	box = gr.Rectangle( gr.Point(x_top_left, y_top_left), gr.Point(x_bottom_right, y_bottom_right) )
	box.setFill( "white" )
	box.setOutline( "black" )
	box.draw( win )
	message = gr.Text( gr.Point(x_center,y_center), str(instructions) )
	message.setSize( 18 )
	message.setFace( "helvetica" )
	message.draw( win )
	win.update()

	# Wait for the user to click before making the instructions disappear
	win.getMouse()
	message.undraw()
	box.undraw()
	win.update()


def init_raindrops( win, n_drops ):
	''' Randomly place rain drops in the window.

	PARAMETERS
	win -- GraphWin object, the window in which the raind drops will be drawn
	n_drops -- int, the number of raindrops to be created

	RETURNS
	raindrops -- lits of references to Circle objects, each representing a rain drop
	'''
	
	# Create multiple raindrops in random locations within the GraphWin window
	win_width = win.getWidth()
	win_height = win.getHeight()
	raindrops = []
	for i in range(n_drops):

		# Choose this droplet's location and size
		x = random.randint( 0, win_width-1 )
		y = random.randint( 0, win_height-1 )
		radius = random.randint( 1, 5 )
		droplet = gr.Circle( gr.Point(x,y), radius )

		# Configure this droplet's color
		red = 60
		green = 100
		blue = random.randint( 200, 255 )
		color = gr.color_rgb( red, green, blue )
		droplet.setFill( color )

		# Draw the droplet in the window
		droplet.draw( win )

		# Save a reference to this new droplet so that we can access it later, e.g. to animate
		raindrops.append( droplet )

	return raindrops


def rain():
	
	# Create a window, initialize the rain, and display a welcome message with instructions
	win = gr.GraphWin( "Rain", 800, 600, autoflush=False )
	win.setBackground( "SkyBlue" )
	n_drops = 1000
	raindrops = init_raindrops( win, n_drops )
	welcome_screen( win )

	# Make it rain! (Until the user presses 'q')
	y_ground = win.getHeight()
	key = ""
	dx = 0
	dy = 2
	while key != "q":

		# Change the direction of the rain in response to key presses
		key = win.checkKey()
		if len(key) > 0:
			dx, dy = set_direction( key, dx, dy )

		# Move each raindrop. When a drop falls out of the window, respawn it on the opposite side.
		for drop in raindrops:
			radius = drop.getRadius()
			drop.move( dx*radius/2, dy*radius/2 )
			check_bounds( win, drop )
			
		# Give humans time to see this frame
		gr.update( 30 )

	# Let the user decide when to close the window
	win.getMouse()
	win.close()

if __name__ == "__main__":
	rain()